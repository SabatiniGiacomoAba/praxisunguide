<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on PraxisLIVE Unofficial Guide</title>
    <link>/tutorials/</link>
    <description>Recent content in Tutorials on PraxisLIVE Unofficial Guide</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 15 Jun 2020 10:23:52 +0200</lastBuildDate>
    
	<atom:link href="/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tutorial 4 - One GUI to rule them all</title>
      <link>/tutorials/tutorial_0004/</link>
      <pubDate>Mon, 15 Jun 2020 10:23:52 +0200</pubDate>
      
      <guid>/tutorials/tutorial_0004/</guid>
      <description>Hello there! We got to the final chapter of our PraxisLIVE basic series (excluding the extra chapter)! Today we&amp;rsquo;ll explore the GUI patch, which you might find very useful if you are going to show your work at a live event. The title, a semi-quote from &amp;ldquo;The Lord of the Rings&amp;rdquo;, sums what GUI do: it allows you to control live parameters all in one screen very quickly, without switching between all the nodes.</description>
    </item>
    
    <item>
      <title>Tutorial 3 - Audio-reactive visuals</title>
      <link>/tutorials/tutorial_0003/</link>
      <pubDate>Sat, 06 Jun 2020 16:30:59 +0200</pubDate>
      
      <guid>/tutorials/tutorial_0003/</guid>
      <description>Hello everybody! We&amp;rsquo;re getting to the final steps of this PraxisLIVE basic tutorial series! Today we&amp;rsquo;re about to see the &amp;ldquo;core&amp;rdquo; of this software: how to create audio on PraxisLIVE? How to make interact Processing visuals with an audio input?
Let&amp;rsquo;s open as usual our project, but this time by also creating a new file (Audio Patch). Once done, you&amp;rsquo;ll see, like on video one when we created it, only the output node.</description>
    </item>
    
    <item>
      <title>Tutorial 2 - Let&#39;s start coding!</title>
      <link>/tutorials/tutorial_0002/</link>
      <pubDate>Fri, 29 May 2020 09:44:26 +0200</pubDate>
      
      <guid>/tutorials/tutorial_0002/</guid>
      <description>Welcome to this second episode of the basic tutorial about PraxisLIVE! Today we&amp;rsquo;ll be starting coding with Processing, tasting a little bit what it&amp;rsquo;s capable of!
Let&amp;rsquo;s re-open our last project: you should have it displayed on the left. Then click on the gear near to the play button to Build the project. Once done, you should see again your video file opened.
First of all, we shall edit the animator node to make it loop</description>
    </item>
    
    <item>
      <title>Tutorial 1 - Our first project</title>
      <link>/tutorials/tutorial_0001/</link>
      <pubDate>Fri, 15 May 2020 21:43:12 +0200</pubDate>
      
      <guid>/tutorials/tutorial_0001/</guid>
      <description>Welcome to this second part of this PraxisLIVE tutorial series! In this new episode we&amp;rsquo;re going to install the software, start a new project and play a little with some nodes.
SETUP
Regardless your OS (Windows, MacOS or Linux), just go to the website and download the software. Just for Linux, if your distro is not Debian-based, you have to install dpkg on your system and run the following command:</description>
    </item>
    
    <item>
      <title>Tutorial 0 â€“ Introduction</title>
      <link>/tutorials/tutorial_0000/</link>
      <pubDate>Sat, 09 May 2020 16:16:15 +0200</pubDate>
      
      <guid>/tutorials/tutorial_0000/</guid>
      <description>Welcome to this basic tutorial series about PraxisLIVE. In this first episode, you&amp;rsquo;ll be introduced to the software and what are its possibles usages.
PraxisLIVE is an open source software for artists to create advanced multimedia content (for example video mappings, audio-syncronized visuals created with code, or GUIs to manage MIDI sounds). Here&amp;rsquo;s a list of its key features:
 intuitive graphical patching, so it works with nodes written in Processing, a Java-based scripting language; You can modify the project and nodes values while running it; Real-time audio/video (it uses infact OpenGL, GStreamer, JACK); It can manage MIDI, OSC, GUIs and physical computing, which are computers that are able to translate real world signals, like sounds or movements, as an input; It&amp;rsquo;s cross-platform (Windows, MacOS, Linux and even Raspberry Pi!</description>
    </item>
    
  </channel>
</rss>